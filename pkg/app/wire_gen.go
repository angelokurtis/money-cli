// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package app

import (
	"github.com/angelokurtis/money/internal/commands"
	"github.com/angelokurtis/money/internal/gmail"
	"github.com/angelokurtis/money/internal/gsheets"
	"github.com/angelokurtis/money/internal/http"
	"github.com/angelokurtis/money/pkg/nuconta"
	"github.com/angelokurtis/money/pkg/nuconta/transactions"
	"github.com/angelokurtis/money/pkg/nuconta/transactions/handlers"
	"github.com/angelokurtis/money/pkg/spreadsheet"
	"github.com/urfave/cli"
)

// Injectors from app.go:

func New() (*App, error) {
	config := http.NewConfig()
	client := http.NewClient(config)
	service, err := gmail.NewService(client)
	if err != nil {
		return nil, err
	}
	usersService := gmail.NewUsersService(service)
	usersMessagesService := gmail.NewUsersMessagesService(usersService)
	handler := handlers.New()
	transactionsService := transactions.NewService(usersMessagesService, handler)
	command := nuconta.Commands(transactionsService)
	sheetsService, err := gsheets.NewService(client)
	if err != nil {
		return nil, err
	}
	classifier := spreadsheet.NewService(sheetsService)
	spreadsheetCommand := spreadsheet.Commands(classifier)
	v := commands.Join(command, spreadsheetCommand)
	app := newApp(v)
	return app, nil
}

// app.go:

type App struct {
	*cli.App
}

func newApp(commands2 []cli.Command) *App {
	app := cli.NewApp()
	app.Name = "Simple Nubank Account CLI"
	app.Usage = "An CLI for getting account statement"
	app.Author = "Tiago Angelo"
	app.Version = "1.0.0"
	app.Commands = commands2
	return &App{App: app}
}
